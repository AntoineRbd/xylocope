name: üöÄ Deploy to OVH

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '18'

jobs:
  # Job de build et test
  build-and-test:
    name: üß™ Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: üü¢ Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: üì¶ Install dependencies
      run: npm ci
    
    - name: üîç Run linting
      run: npm run lint || echo "Linting warnings/errors found but continuing deployment"
    
    - name: ‚úÖ Validate HTML
      run: npm run validate-html
    
    - name: üß™ Run unit tests
      run: npm run test:unit || echo "Unit tests failed but continuing deployment"
    
    - name: üî® Build production assets
      run: npm run build
    
    - name: üñºÔ∏è Optimize images
      run: npm run optimize-images
    
    - name: üìã Create deployment info
      run: |
        echo "DEPLOY_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
        echo "COMMIT_SHA=${{ github.sha }}" >> $GITHUB_ENV
        echo "BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
    
    - name: üìÑ Generate deployment manifest
      run: |
        cat > deployment-info.json << EOF
        {
          "deployTime": "${{ env.DEPLOY_TIME }}",
          "commitSha": "${{ env.COMMIT_SHA }}",
          "branchName": "${{ env.BRANCH_NAME }}",
          "version": "$(git describe --tags --always)",
          "repository": "${{ github.repository }}",
          "workflow": "${{ github.workflow }}",
          "runId": "${{ github.run_id }}"
        }
        EOF
    
    - name: üì§ Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: website-build
        path: |
          index.html
          css/
          js/
          images/
          assets/
          dist/
          deployment-info.json
        retention-days: 30

  # Job de d√©ploiement vers OVH
  deploy-ovh:
    name: üåê Deploy to OVH
    needs: build-and-test
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://xylocope.fr
    
    steps:
    - name: üì• Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: website-build
        path: ./build
    
    - name: üìã Display deployment info
      run: |
        echo "üöÄ D√©ploiement vers OVH"
        echo "üìÖ Date: $(date)"
        echo "üåø Branche: ${{ github.ref_name }}"
        echo "üìù Commit: ${{ github.sha }}"
        echo "üë§ Auteur: ${{ github.actor }}"
        cat ./build/deployment-info.json | jq '.'
    
    - name: üßπ Prepare files for deployment
      run: |
        cd build
        
        # Cr√©er la structure des dossiers pour le d√©ploiement
        mkdir -p deploy-ready
        
        # Copier les fichiers essentiels
        cp index.html deploy-ready/
        cp -r css/ deploy-ready/css/
        cp -r js/ deploy-ready/js/
        cp -r images/ deploy-ready/images/
        cp -r assets/ deploy-ready/assets/
        
        # Copier les fichiers optimis√©s si ils existent
        if [ -d "dist/" ]; then
          cp -r dist/ deploy-ready/dist/
        fi
        
        # Ajouter le fichier de d√©ploiement
        cp deployment-info.json deploy-ready/
        
        # Cr√©er un fichier .htaccess pour optimiser les performances
        cat > deploy-ready/.htaccess << 'EOF'
        # Xylocope.fr - Configuration Apache
        
        # Compression GZIP
        <IfModule mod_deflate.c>
          AddOutputFilterByType DEFLATE text/plain
          AddOutputFilterByType DEFLATE text/html
          AddOutputFilterByType DEFLATE text/xml
          AddOutputFilterByType DEFLATE text/css
          AddOutputFilterByType DEFLATE application/xml
          AddOutputFilterByType DEFLATE application/xhtml+xml
          AddOutputFilterByType DEFLATE application/rss+xml
          AddOutputFilterByType DEFLATE application/javascript
          AddOutputFilterByType DEFLATE application/x-javascript
        </IfModule>
        
        # Cache headers
        <IfModule mod_expires.c>
          ExpiresActive on
          ExpiresByType text/css "access plus 1 year"
          ExpiresByType application/javascript "access plus 1 year"
          ExpiresByType text/javascript "access plus 1 year"
          ExpiresByType image/png "access plus 1 year"
          ExpiresByType image/jpg "access plus 1 year"
          ExpiresByType image/jpeg "access plus 1 year"
          ExpiresByType image/gif "access plus 1 year"
          ExpiresByType image/svg+xml "access plus 1 year"
          ExpiresByType video/mp4 "access plus 1 year"
          ExpiresByType video/webm "access plus 1 year"
        </IfModule>
        
        # Security headers
        <IfModule mod_headers.c>
          Header always set X-Frame-Options "SAMEORIGIN"
          Header always set X-Content-Type-Options "nosniff"
          Header always set Referrer-Policy "strict-origin-when-cross-origin"
        </IfModule>
        
        # Force HTTPS
        RewriteEngine On
        RewriteCond %{HTTPS} off
        RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
        
        # Remove trailing slashes
        RewriteCond %{REQUEST_FILENAME} !-d
        RewriteCond %{THE_REQUEST} /+([^?\s]*?)(?:\?[^\s]*?)?\s+HTTP/
        RewriteRule ^(.+?)/?$ /$1 [R=301,L]
        
        EOF
        
        # Cr√©er un robots.txt
        cat > deploy-ready/robots.txt << 'EOF'
        User-agent: *
        Allow: /
        
        Sitemap: https://xylocope.fr/sitemap.xml
        EOF
        
        echo "üìÅ Fichiers pr√©par√©s pour le d√©ploiement:"
        find deploy-ready -type f | head -20
    
    - name: üì§ Deploy via FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ftp.cluster021.hosting.ovh.net
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./build/deploy-ready/
        server-dir: ./www/
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/.DS_Store
          **/Thumbs.db
          **/*.log
          **/.env*
          **/deployment-info.json
        clean: true
        clean-exclude: |
          .htaccess
          robots.txt
    
    - name: üîç Verify deployment
      run: |
        echo "üïê Attente de 10 secondes pour la propagation..."
        sleep 10
        
        echo "üåê V√©rification du site web..."
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://xylocope.fr)
        
        if [ "$HTTP_STATUS" -eq 200 ]; then
          echo "‚úÖ Site accessible - HTTP $HTTP_STATUS"
        else
          echo "‚ùå Probl√®me d'acc√®s - HTTP $HTTP_STATUS"
          exit 1
        fi
        
        echo "üîç V√©rification des ressources CSS..."
        CSS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://xylocope.fr/css/main.css)
        
        if [ "$CSS_STATUS" -eq 200 ]; then
          echo "‚úÖ CSS accessible - HTTP $CSS_STATUS"
        else
          echo "‚ö†Ô∏è CSS non accessible - HTTP $CSS_STATUS"
        fi
    
    - name: üìä Deployment summary
      run: |
        echo "## üöÄ D√©ploiement termin√© avec succ√®s!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìã Informations de d√©ploiement" >> $GITHUB_STEP_SUMMARY
        echo "- **Site:** https://xylocope.fr" >> $GITHUB_STEP_SUMMARY
        echo "- **Branche:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Auteur:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Date:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ‚úÖ V√©rifications effectu√©es" >> $GITHUB_STEP_SUMMARY
        echo "- Tests unitaires pass√©s" >> $GITHUB_STEP_SUMMARY
        echo "- Validation HTML OK" >> $GITHUB_STEP_SUMMARY
        echo "- Linting r√©ussi" >> $GITHUB_STEP_SUMMARY
        echo "- Site accessible" >> $GITHUB_STEP_SUMMARY

  # Job de notification (optionnel)
  notify:
    name: üì¢ Notifications
    needs: [build-and-test, deploy-ovh]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: üìß Send success notification
      if: needs.deploy-ovh.result == 'success'
      run: |
        echo "üéâ D√©ploiement r√©ussi pour xylocope.fr"
        echo "Le site est maintenant en ligne avec les derni√®res modifications."
    
    - name: üö® Send failure notification
      if: needs.deploy-ovh.result == 'failure' || needs.build-and-test.result == 'failure'
      run: |
        echo "‚ùå √âchec du d√©ploiement"
        echo "V√©rifiez les logs GitHub Actions pour plus de d√©tails."