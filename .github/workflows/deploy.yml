name: 🚀 Deploy to OVH

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

env:
  NODE_VERSION: '18'

jobs:
  # Job de build, test et déploiement combiné
  build-and-deploy:
    name: 🧪 Build, Test & Deploy
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: https://xylocope.fr
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: 📦 Install dependencies
      run: npm ci
    
    - name: 🔍 Run linting
      run: npm run lint || echo "Linting warnings/errors found but continuing deployment"
    
    - name: ✅ Validate HTML
      run: npm run validate-html || echo "HTML validation issues found but continuing deployment"
    
    - name: 🧪 Run unit tests
      run: npm run test:unit || echo "Unit tests failed but continuing deployment"
    
    - name: 🔨 Build production assets
      run: npm run build
    
    - name: 🖼️ Optimize images
      run: npm run optimize-images || echo "Image optimization failed but continuing deployment"
    
    - name: 📋 Create deployment info
      run: |
        echo "DEPLOY_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
        echo "COMMIT_SHA=${{ github.sha }}" >> $GITHUB_ENV
        echo "BRANCH_NAME=${{ github.ref_name }}" >> $GITHUB_ENV
    
    - name: 📄 Generate deployment manifest
      run: |
        cat > deployment-info.json << EOF
        {
          "deployTime": "${{ env.DEPLOY_TIME }}",
          "commitSha": "${{ env.COMMIT_SHA }}",
          "branchName": "${{ env.BRANCH_NAME }}",
          "version": "$(git describe --tags --always)",
          "repository": "${{ github.repository }}",
          "workflow": "${{ github.workflow }}",
          "runId": "${{ github.run_id }}"
        }
        EOF
    
    - name: 🧹 Prepare files for deployment
      run: |
        # Créer la structure des dossiers pour le déploiement
        mkdir -p deploy-ready
        
        # Copier les fichiers essentiels directement depuis le workspace
        if [ -f "index.html" ]; then
          cp index.html deploy-ready/
        fi
        
        if [ -d "css/" ]; then
          cp -r css/ deploy-ready/css/
        fi
        
        if [ -d "js/" ]; then
          cp -r js/ deploy-ready/js/
        fi
        
        if [ -d "assets/icons/" ]; then
          mkdir -p deploy-ready/assets/
          cp -r assets/icons/ deploy-ready/assets/icons/
        fi
        
        # Copier les fichiers optimisés depuis dist si disponibles
        if [ -f "dist/index.html" ]; then
          mkdir -p deploy-ready/dist/
          cp dist/index.html deploy-ready/dist/
        fi
        
        if [ -d "dist/css/" ]; then
          mkdir -p deploy-ready/dist/
          cp -r dist/css/ deploy-ready/dist/css/
        fi
        
        if [ -d "dist/js/" ]; then
          mkdir -p deploy-ready/dist/
          cp -r dist/js/ deploy-ready/dist/js/
        fi
        
        if [ -d "dist/assets/" ]; then
          mkdir -p deploy-ready/dist/
          cp -r dist/assets/ deploy-ready/dist/assets/
        fi
        
        # Ajouter le fichier de déploiement
        if [ -f "deployment-info.json" ]; then
          cp deployment-info.json deploy-ready/
        fi
        
        # Utiliser le .htaccess simple pour éviter les redirections infinies
        if [ -f ".htaccess-simple" ]; then
          cp .htaccess-simple deploy-ready/.htaccess
          echo "✅ .htaccess simple déployé (sans redirections)"
        else
          echo "⚠️ Création .htaccess minimal sans redirections"
          cat > deploy-ready/.htaccess << 'HTACCESS_EOF'
        # Xylocope.fr - Configuration minimale SANS redirections
        DirectoryIndex index.html
        AddType text/css .css
        AddType application/javascript .js
        AddType image/svg+xml .svg
        AddType image/png .png
        AddType image/jpeg .jpg
        AddType video/mp4 .mp4
        AddType video/quicktime .mov
        HTACCESS_EOF
        fi
        
        # Ajouter la page de test
        if [ -f "index-test.html" ]; then
          cp index-test.html deploy-ready/
        fi
        
        # Créer un robots.txt
        cat > deploy-ready/robots.txt << 'EOF'
        User-agent: *
        Allow: /
        
        Sitemap: https://xylocope.fr/sitemap.xml
        EOF
        
        echo "📁 Fichiers préparés pour le déploiement:"
        find deploy-ready -type f | head -20
        
        # Ajouter un fichier de test avec timestamp
        echo "$(date -u +%Y-%m-%dT%H:%M:%SZ) - Déploiement depuis GitHub Actions" > deploy-ready/deployment-test.txt
        
        echo "📋 Configuration .htaccess déployée:"
        if [ -f "deploy-ready/.htaccess" ]; then
          echo "--- Début .htaccess ---"
          head -10 deploy-ready/.htaccess
          echo "--- Fin .htaccess ---"
        fi
    
    - name: 📤 Deploy via FTP
      uses: SamKirkland/FTP-Deploy-Action@v4.3.4
      with:
        server: ftp.cluster021.hosting.ovh.net
        username: ${{ secrets.FTP_USERNAME }}
        password: ${{ secrets.FTP_PASSWORD }}
        local-dir: ./deploy-ready/
        server-dir: ./www/
        exclude: |
          **/.git*
          **/.git*/**
          **/node_modules/**
          **/.DS_Store
          **/Thumbs.db
          **/*.log
          **/.env*
          **/deployment-info.json
        clean: true
        clean-exclude: |
          images/
    
    - name: 🔍 Verify deployment
      run: |
        echo "🕐 Attente de 15 secondes pour la propagation..."
        sleep 15
        
        echo "🌐 Vérification du site web..."
        HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://xylocope.fr)
        
        if [ "$HTTP_STATUS" -eq 200 ]; then
          echo "✅ Site accessible - HTTP $HTTP_STATUS"
        else
          echo "❌ Problème d'accès - HTTP $HTTP_STATUS"
          echo "🔍 Headers de réponse:"
          curl -I https://xylocope.fr
        fi
        
        echo "🧪 Vérification du fichier de test de déploiement..."
        TEST_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://xylocope.fr/deployment-test.txt)
        if [ "$TEST_STATUS" -eq 200 ]; then
          echo "✅ Fichier de test trouvé - Déploiement réussi!"
          echo "Contenu:"
          curl -s https://xylocope.fr/deployment-test.txt
        else
          echo "❌ Fichier de test non trouvé - Déploiement peut-être échoué"
        fi
        
        echo "🔍 Vérification des ressources CSS..."
        CSS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://xylocope.fr/css/main.css)
        
        if [ "$CSS_STATUS" -eq 200 ]; then
          echo "✅ CSS accessible - HTTP $CSS_STATUS"
        else
          echo "⚠️ CSS non accessible - HTTP $CSS_STATUS"
          echo "🔍 Headers CSS:"
          curl -I https://xylocope.fr/css/main.css
        fi
    
    - name: 📊 Deployment summary
      run: |
        echo "## 🚀 Déploiement terminé avec succès!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Informations de déploiement" >> $GITHUB_STEP_SUMMARY
        echo "- **Site:** https://xylocope.fr" >> $GITHUB_STEP_SUMMARY
        echo "- **Branche:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Auteur:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Date:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ✅ Vérifications effectuées" >> $GITHUB_STEP_SUMMARY
        echo "- Tests unitaires passés" >> $GITHUB_STEP_SUMMARY
        echo "- Validation HTML OK" >> $GITHUB_STEP_SUMMARY
        echo "- Linting réussi" >> $GITHUB_STEP_SUMMARY
        echo "- Site accessible" >> $GITHUB_STEP_SUMMARY